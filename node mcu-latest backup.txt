#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <SoftwareSerial.h>

const char* ssid = "Dido's A26";
const char* password = "Dido_87*";

// Backend endpoint
const char* backendURL = "http://10.183.99.188:5000/sensor/add";

ESP8266WebServer server(80);
SoftwareSerial unoSerial(13, 15); // RX = GPIO13, TX = GPIO15

#define RELAY_PIN 5  // D1 on NodeMCU

String lightData = "No data yet";
String moistureData = "No data yet";
bool pumpRunning = false;
unsigned long pumpEndTime = 0;

// Send interval to backend (milliseconds)
unsigned long lastSendTime = 0;
const unsigned long sendInterval = 10000; // every 10 seconds

// ---------------------- Local HTTP Handlers ----------------------

void handleRoot() {
  String json = "{";
  json += "\"MoistureSensor\": \"" + moistureData + "\",";
  json += "\"LightSensor\": \"" + lightData + "\",";
  json += "\"PumpRunning\": " + String(pumpRunning ? "true" : "false");
  json += "}";
  server.send(200, "application/json", json);
}

void handlePump() {
  if (!server.hasArg("time")) {
    server.send(400, "text/plain", "Missing 'time' parameter");
    return;
  }

  int duration = server.arg("time").toInt();
  if (duration <= 0) {
    server.send(400, "text/plain", "Invalid duration");
    return;
  }

  digitalWrite(RELAY_PIN, HIGH);  // turn relay ON
  pumpRunning = true;
  pumpEndTime = millis() + (duration * 1000UL);

  Serial.println("Pump ON for " + String(duration) + " seconds");
  server.send(200, "text/plain", "Pump activated for " + String(duration) + " seconds");
}

// ---------------------- Backend Data Sending ----------------------

void sendToBackend() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected, skipping backend send.");
    return;
  }

  HTTPClient http;
  WiFiClient client; // <-- Use plain HTTP client

  String json = "{";
  json += "\"MoistureSensor\": \"" + moistureData + "\",";
  json += "\"LightSensor\": \"" + lightData + "\",";
  json += "\"PumpRunning\": " + String(pumpRunning ? "true" : "false");
  json += "}";

  Serial.println("Sending JSON to backend: " + json);

  http.begin(client, backendURL);
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(json);
  if (httpResponseCode > 0) {
    Serial.println("Backend response: " + String(httpResponseCode));
  } else {
    Serial.println("Error sending data: " + http.errorToString(httpResponseCode));
  }

  http.end();
}

// ---------------------- Setup & Loop ----------------------

void setup() {
  Serial.begin(115200);
  unoSerial.begin(9600);

  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW); // relay OFF initially

  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected! IP: " + WiFi.localIP().toString());

  // Register HTTP endpoints
  server.on("/", handleRoot);
  server.on("/pump", handlePump);
  server.begin();
  Serial.println("HTTP server started.");
}

void loop() {
  server.handleClient();

  // Auto turn off pump after timer expires
  if (pumpRunning && millis() > pumpEndTime) {
    digitalWrite(RELAY_PIN, LOW);
    pumpRunning = false;
    Serial.println("Pump OFF");
  }

  // Read serial sensor data
  if (unoSerial.available()) {
    String line = unoSerial.readStringUntil('\n');
    line.trim();

    if (line.startsWith("L:")) {
      lightData = line.substring(2);
      Serial.println("Light updated: " + lightData);
    } else if (line.startsWith("M:")) {
      moistureData = line.substring(2);
      Serial.println("Moisture updated: " + moistureData);
    }
  }

  // Send data to backend periodically
  if (millis() - lastSendTime >= sendInterval) {
    sendToBackend();
    lastSendTime = millis();
  }
}
